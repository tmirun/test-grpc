// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: common/v1/person.proto

package commonv1connect

import (
	v1 "buf-go-angular-example/gen/common/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PersonServiceName is the fully-qualified name of the PersonService service.
	PersonServiceName = "common.v1.PersonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PersonServiceCreateProcedure is the fully-qualified name of the PersonService's Create RPC.
	PersonServiceCreateProcedure = "/common.v1.PersonService/Create"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	personServiceServiceDescriptor      = v1.File_common_v1_person_proto.Services().ByName("PersonService")
	personServiceCreateMethodDescriptor = personServiceServiceDescriptor.Methods().ByName("Create")
)

// PersonServiceClient is a client for the common.v1.PersonService service.
type PersonServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
}

// NewPersonServiceClient constructs a client for the common.v1.PersonService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPersonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PersonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &personServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+PersonServiceCreateProcedure,
			connect.WithSchema(personServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// personServiceClient implements PersonServiceClient.
type personServiceClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
}

// Create calls common.v1.PersonService.Create.
func (c *personServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// PersonServiceHandler is an implementation of the common.v1.PersonService service.
type PersonServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
}

// NewPersonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPersonServiceHandler(svc PersonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	personServiceCreateHandler := connect.NewUnaryHandler(
		PersonServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(personServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/common.v1.PersonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PersonServiceCreateProcedure:
			personServiceCreateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPersonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPersonServiceHandler struct{}

func (UnimplementedPersonServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("common.v1.PersonService.Create is not implemented"))
}
